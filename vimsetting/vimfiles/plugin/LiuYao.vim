let g:ly_paipan_mode = get(g:, 'ly_paipan_mode', 0) " 0:六爻, 1:梅花
let g:ly_visible_all = get(g:, 'ly_visible_all', 0) " 只用于六爻排盘方式 0:只显示宫卦中的伏神和变卦中的动爻, 1:显示宫卦和变卦中所有的爻
let s:paipanmethod = ['LiuYao', 'MeiHua']
let s:setupmethod = ['Coin Head', 'Coin Tail', 'Gua Code', 'Three Numbers']
let s:setupexample = ['CH:000000', 'CT:000000', 'GC:11123456', 'TN:111,222,333']
let s:txtTG = ['甲',           '乙',           '丙',           '丁',           '戊',           '己',           '庚',           '辛',           '壬',           '癸']
let s:txtDZ = ['子',           '丑',           '寅',           '卯',           '辰',           '巳',           '午',           '未',           '申',           '酉',           '戌',           '亥']
let s:txtYao = ['━━  ━━', '━━━━━']
let s:txtLS = ['青龙',                          '朱雀',                          '勾陈',                          '滕蛇',                          '白虎',                          '玄武']
let s:txtLQ = ['兄',           '父',           '官',           '财',           '孙']
let s:txtGua = ['坤',           '艮',           '坎',           '巽',           '震',           '离',           '兑',           '乾']
let s:txtGuaType = ['宫',           '正',           '互',           '变',           '错',           '综']
let s:txtExtra = ['年',           '月',           '日',           '时',           '空',           '世',           '应',           '动',           '伏']
let s:txt64Gua = [ "坤"   , "剥" , "比"   , "观"   , "豫"   , "晋"   , "萃"   , "否"   ,
                 \ "谦"   , "艮" , "蹇"   , "渐"   , "小过" , "旅"   , "咸"   , "遯"   ,
                 \ "师"   , "蒙" , "坎"   , "涣"   , "解"   , "未济" , "困"   , "讼"   ,
                 \ "升"   , "蛊" , "井"   , "巽"   , "恒"   , "鼎"   , "大过" , "姤"   ,
                 \ "复"   , "颐" , "屯"   , "益"   , "震"   , "噬嗑" , "随"   , "无妄" ,
                 \ "明夷" , "贲" , "既济" , "家人" , "丰"   , "离"   , "革"   , "同人" ,
                 \ "临"   , "损" , "节"   , "中孚" , "归妹" , "睽"   , "兑"   , "履"   ,
                 \ "泰"   , "大畜" , "需" , "小畜" , "大壮" , "大有" , "夬"   , "乾"   ]
let s:txtGuaXiang = ["地","山","水","风","雷","火","泽","天"]
"let s:txtTG = [nr2char(48343), nr2char(53970), nr2char(45563), nr2char(46753), nr2char(52972), nr2char(48314), nr2char(47357), nr2char(53441), nr2char(51401), nr2char(47599)]
"let s:txtDZ = [nr2char(55251), nr2char(46067), nr2char(54010), nr2char(50094), nr2char(46013), nr2char(52168), nr2char(52967), nr2char(52916), nr2char(51690), nr2char(54223), nr2char(53479), nr2char(47781)]
"let s:txtYao = [repeat(nr2char(43429), 2) . '  ' . repeat(nr2char(43429), 2), repeat(nr2char(43429), 5)]
"let s:txtLS = [nr2char(51168) . nr2char(49658), nr2char(55020) . nr2char(51384), nr2char(47540) . nr2char(46018), nr2char(60408) . nr2char(51679), nr2char(45271) . nr2char(48034), nr2char(53502) . nr2char(52964)]
"let s:txtLQ = [nr2char(53462), nr2char(47288), nr2char(47577), nr2char(45766), nr2char(52207)]
"let s:txtGua = [nr2char(49316), nr2char(62686), nr2char(49074), nr2char(55779), nr2char(54768), nr2char(49387), nr2char(46802), nr2char(51116)]
"let s:txtGuaType = [nr2char(47532), nr2char(54781), nr2char(48037), nr2char(45540), nr2char(46317), nr2char(55259)]
"let s:txtExtra = [nr2char(50410), nr2char(54466), nr2char(51413), nr2char(51889), nr2char(49109), nr2char(51904), nr2char(54182), nr2char(46767), nr2char(47100)]
let s:wxGua = [3, 3, 0, 1, 1, 2, 4, 4] " 土，土，水，木，木，火，金，金
let s:wxDZ  = [0, 3, 1, 1, 3, 2, 2, 3, 4, 4, 3, 0]
let s:baseGZ = [[10, 12,  2,  4,  6,  8],
              \ [ 3,  1, 11,  9,  7,  5],
              \ [ 1, 11,  9,  7,  5,  3],
              \ [ 4,  6,  8, 10, 12,  2],
              \ [11,  9,  7,  5,  3,  1],
              \ [ 6,  8, 10, 12,  2,  4],
              \ [ 8, 10, 12,  2,  4,  6],
              \ [11,  9,  7,  5,  3,  1]]
let s:ChineseSolarDB = {
                       \ '1951' : ['0106033026','0120205206','0204151329','0219110939','0306092639','0321102538','0405143236','0420214802','0506080917','0521211524','0606123236','0622052449','0707225352','0723162037','0808083723','0823231600','0908111802','0923203642','1009023619','1024053600','1108052639','1123025106','1207220221','1222160005'],
                       \ '1952' : ['0106090948','0121023829','0204205300','0219165648','0305150722','0320161347','0404201506','0420033641','0505135406','0521030354','0605182023','0621111234','0707044441','0722220728','0807143100','0823050247','0907171340','0923022334','1008083219','1023112206','1107112131','1122083538','1207035537','1221214313'],
                       \ '1953' : ['0105150209','0120082124','0204024558','0218224107','0305210232','0320220033','0405021243','0420092525','0505195223','0521085252','0606001610','0621165959','0707103459','0723035211','0807201439','0823104514','0907225248','0923080557','1008141028','1023170614','1107170056','1122142200','1207093659','1222033127'],
                       \ '1954' : ['0105204522','0120141109','0204083049','0219043225','0306024838','0321035330','0405075916','0420151937','0506013813','0521144726','0606060053','0621225407','0707161920','0723094506','0808015915','0823163600','0908043757','0923135518','1008195723','1023225626','1107225038','1122201411','1207152829','1222092419'],
                       \ '1955' : ['0106023557','0120200158','0204141748','0219101856','0306083110','0321093515','0405133855','0420205758','0506071804','0521202421','0606114324','0622043118','0707220552','0723152433','0808075006','0823221857','0908103148','0923194053','1009015210','1024044304','1108044515','1123020056','1207212255','1222151059'],
                       \ '1956' : ['0106083027','0121014828','0204201209','0219160455','0305142445','0320152034','0404193125','0420024339','0505131009','0521021242','0605173555','0621102346','0707035800','0722211953','0807134015','0823041449','0907161901','0923013507','1008073600','1023103426','1107102601','1122074957','1207030213','1221205933'],
                       \ '1957' : ['0105141031','0120073842','0204015444','0218215804','0305201013','0320211633','0405011854','0420084117','0505185826','0521081027','0605232449','0621162035','0707094817','0723031456','0807193210','0823100738','0907221219','0923072612','1008133008','1023162422','1107162011','1122133908','1207085604','1222024843'],
                       \ '1958' : ['0105200429','0120132835','0204074915','0219034828','0306020454','0321030551','0405071226','0420142703','0506004915','0521135103','0606051214','0621215655','0707153329','0723085031','0808011714','0823154555','0908035851','0923130849','1008191910','1023221121','1107221156','1122192911','1207144940','1222083946'],
                       \ '1959' : ['0106015823','0120191855','0204134214','0219093735','0306075638','0321085432','0405130307','0420201635','0506063852','0521194214','0606110010','0622034947','0707211953','0723144525','0808070406','0823214331','0908094754','0923190825','1009010950','1024041103','1108040208','1123012659','1207203720','1222143422'],
                       \ '1960' : ['0106074233','0121011008','0204192316','0219152623','0305133612','0320144244','0404184338','0420020558','0505122240','0521013335','0605164839','0621094218','0707031241','0722203726','0807125945','0823033422','0907154523','0923005852','1008070844','1023100154','1107100207','1122071827','1207023748','1221202558'],
                       \ '1961' : ['0105134237','0120070107','0204012225','0218211627','0305193442','0320203209','0405004212','0420075506','0505182119','0521072218','0605224604','0621153008','0707090640','0723022338','0807184824','0823091836','0907212915','0923064229','1008125058','1023154724','1107154614','1122130744','1207082557','1222021930'],
                       \ '1962' : ['0105193459','0120125755','0204071721','0219031434','0306012929','0321022933','0405063416','0420135043','0506000932','0521131631','0606043117','0621212406','0707145106','0723081757','0808003341','0823151228','0908031522','0923123515','1008183800','1023214005','1107213459','1122190149','1207141637','1222081514'],
                       \ '1963' : ['0106012630','0120185356','0204130750','0219090838','0306071712','0321081941','0405121841','0420193607','0506055158','0521185806','0606101424','0622030400','0707203737','0723135913','0808062525','0823205730','0908091149','0923182328','1009003615','1024032853','1108033225','1123004926','1207201241','1222140154'],
                       \ '1964' : ['0106072224','0121004106','0204190501','0219145723','0305131605','0320140954','0404181822','0420012707','0505115101','0521004944','0605161143','0621085645','0707023205','0722195242','0807121610','0823025103','0907145926','0923001635','1008062127','1023092035','1107091505','1122063852','1207015305','1221194933'],
                       \ '1965' : ['0105130200','0120062853','0204004608','0218204751','0305190040','0320200447','0405000646','0420072607','0505174137','0521065019','0605220212','0621145547','0707082127','0723014814','0807180439','0823084243','0907204753','0923060601','1008121109','1023150956','1107150629','1122122904','1207074530','1222014024'],
                       \ '1966' : ['0105185425','0120121941','0204063750','0219023745','0306005121','0321015255','0405055631','0420131132','0505233028','0521123203','0606034939','0621203324','0707140703','0723072314','0807234858','0823141739','0908023200','0923114304','1008175645','1023205047','1107205520','1122181409','1207133749','1222072813'],
                       \ '1967' : ['0106004824','0120180736','0204123054','0219082344','0306064156','0321073650','0405114444','0420185511','0506051730','0521181756','0606093620','0622022250','0707195319','0723131551','0808053455','0823201226','0908081742','0923173801','1008234110','1024024349','1108023726','1123000433','1207191732','1222131622'],
                       \ '1968' : ['0106062615','0120235410','0204180729','0219140917','0305121750','0320132204','0404172058','0420004114','0505105554','0521000559','0605151912','0621081320','0707014142','0722190725','0807112713','0823020252','0907141126','0922232611','1008053425','1023082935','1107082918','1122054832','1207010817','1221185948'],
                       \ '1969' : ['0105121652','0120053816','0203235858','0218195436','0305181042','0320190814','0404231459','0420062658','0505164952','0521054951','0605211138','0621135511','0707073140','0723004816','0807171412','0823074326','0907195527','0923050656','1008111642','1023141105','1107141121','1122113106','1207065119','1222004344'],
                       \ '1970' : ['0105180144','0120112353','0204054548','0219014152','0305235832','0321005623','0405050147','0420121456','0505223345','0521113714','0606025208','0621194231','0707131029','0723063651','0807225407','0823133354','0908013754','0923105900','1008170137','1023200418','1107195747','1122172433','1207123721','1222063545'],
                       \ '1971' : ['0105234514','0120171250','0204112533','0219072705','0306053449','0321063813','0405103603','0420175414','0506040808','0521171456','0606082846','0622011928','0707185102','0723121440','0808044011','0823191516','0908073014','0923164456','1008225835','1024015309','1108015634','1122231354','1207183537','1222122348'],
                       \ '1972' : ['0106054146','0120225857','0204172013','0219131124','0305112807','0320122126','0404162853','0419233728','0505100112','0520225931','0605142201','0621070611','0707004254','0722180233','0807102832','0823010303','0907131506','0922223244','1008044145','1023074128','1107073926','1122050242','1207001844','1221181251'],
                       \ '1973' : ['0105112516','0120044809','0203230409','0218190108','0305171236','0320181229','0404221357','0420053026','0505154629','0521045354','0605200654','0621130039','0707062723','0722235535','0807161249','0823065326','0907185921','0923042102','1008102710','1023133006','1107132735','1122105400','1207061025','1222000745'],
                       \ '1974' : ['0105172000','0120104540','0204050003','0219005835','0305230705','0321000637','0405040503','0420111854','0505213357','0521103607','0606015144','0621183740','0707121108','0723053012','0807215709','0823122838','0908004504','0923095827','1008161443','1023191041','1107191803','1122163830','1207120441','1222055600'],
                       \ '1975' : ['0105231735','0120163620','0204105916','0219064946','0306050548','0321055640','0405100131','0420170715','0506032714','0521162343','0606074203','0622002628','0707175925','0723112148','0808034456','0823182337','0908063316','0923155511','1008220207','1024010608','1108010244','1122223049','1207174613','1222114535'],
                       \ '1976' : ['0106045723','0120222508','0204163931','0219123957','0305104811','0320114939','0404154632','0419230303','0505091432','0520222113','0605133120','0621062416','0706235055','0722171829','0807093826','0823001819','0907122817','0922214815','1008035806','1023065803','1107065837','1122042132','1206234101','1221173511'],
                       \ '1977' : ['0105105106','0120041427','0203223326','0218183029','0305164414','0320174224','0404214552','0420045721','0505151608','0521041430','0605193210','0621121351','0707054755','0722230338','0807153013','0823060014','0907181543','0923032918','1008094401','1023124043','1107124550','1122100659','1207053047','1221232308'],
                       \ '1978' : ['0105164311','0120100400','0204042658','0219002057','0305223812','0320233334','0405033923','0420104935','0505210835','0521100828','0606012307','0621180936','0707113702','0723050020','0807211745','0823115650','0908000224','0923092528','1008153100','1023183717','1107183408','1122160439','1207112004','1222052100'],
                       \ '1979' : ['0105223135','0120155958','0204101219','0219061315','0306041937','0321052157','0405091759','0420163525','0506024713','0521155351','0606070511','0621235608','0707172436','0723104832','0808031054','0823174643','0908055944','0923151620','1008213000','1024002748','1108003247','1122215407','1207171749','1222110947'],
                       \ '1980' : ['0106042854','0120214839','0204160930','0219120142','0305101634','0320110945','0404151447','0419222247','0505084437','0520214212','0605130354','0621054708','0706232401','0722164203','0807090834','0822234039','0907115324','0922210838','1008031911','1023061729','1107061814','1122034125','1206230117','1221165607'],
                       \ '1981' : ['0105101240','0120033601','0203215526','0218175142','0305160510','0320170254','0404210505','0420041836','0505143452','0521033929','0605185246','0621114448','0707051158','0722223948','0807145712','0823053809','0907174310','0923030508','1008090930','1023121249','1107120829','1122093558','1207045117','1221225036'],
                       \ '1982' : ['0105160239','0120093054','0204034527','0218234628','0305215435','0320225550','0405025244','0420100730','0505202003','0521092257','0606003558','0621172305','0707105439','0723041528','0807204149','0823111514','0907233142','0923084610','1008150207','1023175745','1107180404','1122152317','1207104805','1222043810'],
                       \ '1983' : ['0105215846','0120151658','0204093945','0219053034','0306034711','0321043843','0405084421','0420155011','0506021054','0521150629','0606062545','0621230841','0707164311','0723100405','0808022934','0823170725','0908051956','0923144130','1008205100','1023235412','1107235207','1122211813','1207163334','1222102951'],
                       \ '1984' : ['0106034052','0120210506','0204151850','0219111618','0305092444','0320102423','0404142224','0419213809','0505075102','0520205741','0605120841','0621050217','0706222909','0722155813','0807081752','0822230008','0907110945','0922203248','1008024229','1023054534','1107054528','1122031034','1206222801','1221162246'],
                       \ '1985' : ['0105093504','0120025731','0203211148','0218170723','0305151625','0320161347','0404201336','0420032546','0505134232','0521024255','0605175956','0621104406','0707041834','0722213626','0807140417','0823043543','0907165303','0923020724','1008082430','1023112145','1107112923','1122085040','1207041617','1221220739'],
                       \ '1986' : ['0105152803','0120084614','0204030744','0218225734','0305211211','0320220244','0405020610','0420091209','0505193036','0521082754','0605234421','0621162958','0707100047','0723032427','0807194540','0823102550','0907223439','0923075855','1008140647','1023171412','1107171243','1122144411','1207100046','1222040201'],
                       \ '1987' : ['0105211259','0120144025','0204085144','0219045003','0306025343','0321035206','0405074414','0420145738','0506010538','0521141002','0606051858','0621221045','0707153842','0723090605','0808012917','0823160950','0908042405','0923134513','1008195938','1023230052','1107230542','1122202925','1207155214','1222094554'],
                       \ '1988' : ['0106030331','0120202422','0204144257','0219103519','0305084646','0320093850','0404133917','0419204458','0505070154','0520195649','0605111458','0621035633','0706213253','0722145104','0807072015','0822215401','0907101129','0922192849','1008014427','1023044407','1107044857','1122021204','1206213433','1221152758'],
                       \ '1989' : ['0105084601','0120020703','0203202714','0218162035','0305143413','0320152821','0404192959','0420023901','0505125401','0521015337','0605170519','0621095304','0707031929','0722204529','0807130353','0823034613','0907155356','0923011941','1008072726','1023103515','1107103337','1122080441','1207032102','1221212207'],
                       \ '1990' : ['0105143320','0120080137','0204021401','0218221402','0305201917','0320211917','0405011256','0420082633','0505183526','0521073722','0605224618','0621153248','0707090030','0723022132','0807184532','0823092048','0907213725','0923065528','1008131346','1023161358','1107162329','1122134657','1207091410','1222030700'],
                       \ '1991' : ['0105202807','0120134704','0204080824','0219035817','0306021213','0321030154','0405070442','0420140825','0506002657','0521132017','0606043817','0621211842','0707145255','0723081103','0808003711','0823151246','0908032715','0923124801','1008190104','1023220508','1107220750','1122193542','1207145600','1222085339'],
                       \ '1992' : ['0106020833','0120193233','0204134819','0219094332','0305075209','0320084805','0404124511','0419195657','0505060844','0520191211','0605102220','0621031406','0706204008','0722140842','0807062713','0822210958','0907091811','0922184238','1008005121','1023035701','1107035656','1122012546','1206204407','1221144310'],
                       \ '1993' : ['0105075629','0120012246','0203193709','0218153509','0305134235','0320144040','0404183712','0420014900','0505120143','0521010144','0605161514','0621085944','0707023201','0722195049','0807121756','0823025015','0907150744','0923002223','1008063957','1023093702','1107094529','1122070646','1207023346','1221202545'],
                       \ '1994' : ['0105134804','0120070722','0204013053','0218212137','0305193740','0320202801','0405003149','0420073601','0505175405','0521064826','0605220448','0621144730','0707081918','0723014058','0807180418','0823084341','0907205502','0923061908','1008122901','1023153557','1107153530','1122130551','1207082248','1222022241'],
                       \ '1995' : ['0105193406','0120130029','0204071254','0219031045','0306011606','0321021428','0405060809','0420132131','0505233004','0521123413','0606034228','0621203422','0707140100','0723072938','0807235143','0823143446','0908024832','0923121258','1008182712','1023213131','1107213537','1122190122','1207142214','1222081646'],
                       \ '1996' : ['0106013126','0120185232','0204130757','0219090048','0305070942','0320080308','0404120202','0419190954','0505052601','0520182307','0605094047','0621022343','0706195959','0722131842','0807054848','0822202246','0907084219','0922180001','1008001838','1023031842','1107032635','1122004928','1206201402','1221140554'],
                       \ '1997' : ['0105072427','0120004230','0203190157','0218145129','0305130409','0320135442','0404175619','0420010254','0505111932','0521001759','0605153237','0621082000','0707014927','0722191528','0807113621','0823021913','0907142850','0922235548','1008060507','1023091442','1107091434','1122064730','1207020453','1221200704'],
                       \ '1998' : ['0105131811','0120064604','0204005648','0218205450','0305185712','0320195434','0404234458','0420065647','0505170314','0521060529','0605211327','0621140237','0707073027','0723005521','0807171946','0823075852','0907201551','0923053710','1008115545','1023145837','1107150824','1122123414','1207080136','1222015630'],
                       \ '1999' : ['0105191712','0120123725','0204065707','0219024653','0306005745','0321014552','0405054441','0420124605','0505230106','0521115230','0606030910','0621194907','0707132500','0723064409','0807231408','0823135102','0908020954','0923113127','1008174820','1023205216','1107205756','1122182455','1207134732','1222074353'],
                       \ '2000' : ['0106010046','0120182308','0204124028','0219083323','0305064243','0320073521','0404113204','0419183938','0505045018','0520174931','0605085840','0621014745','0706191358','0722124244','0807050301','0822194834','0907075911','0922172735','1007233811','1023024726','1107024802','1122001921','1206193704','1221133730'],
                       \ '2001' : ['0105064920','0120001623','0203182856','0218142723','0305123240','0320133052','0404172432','0420003600','0505104459','0520234423','0605145347','0621073754','0707010652','0722182622','0807105227','0823012713','0907134614','0922230430','1008052503','1023082536','1107083652','1122060026','1207012852','1221192130'],
                       \ '2002' : ['0105124334','0120060207','0204002413','0218201327','0305182741','0320191615','0404231822','0420062031','0505163717','0521052903','0605204442','0621132422','0707065611','0723001454','0807163920','0823071700','0907193103','0923045525','1008110923','1023141754','1107142152','1122115347','1207071418','1222011430'],
                       \ '2003' : ['0105182754','0120115247','0204060533','0219020025','0306000505','0321005956','0405045239','0420120252','0505221032','0521111223','0606021938','0621191021','0707123533','0723060403','0807222416','0823130809','0908012016','0923104653','1008170037','1023200831','1107201314','1122174323','1207130510','1222070348'],
                       \ '2004' : ['0106001834','0120174224','0204115616','0219075003','0305055541','0320064840','0404104319','0419175025','0505040229','0520165914','0605081346','0621005651','0706183116','0722115010','0807041937','0822185317','0907071255','0922162952','1007224921','1023014853','1107015837','1121232142','1206184857','1221124135'],
                       \ '2005' : ['0105060258','0119232133','0203174303','0218133157','0305114512','0320123326','0404163418','0419233716','0505095252','0520224726','0605140154','0621064610','0707001636','0722174043','0807100323','0823004526','0907125637','0922222307','1008043313','1023074216','1107074223','1122051456','1207003241','1221183456'],
                       \ '2006' : ['0105114655','0120051512','0203232708','0218192528','0305172834','0320182534','0404221529','0420052607','0505153041','0521043135','0605193700','0621122551','0707055127','0722231740','0807154046','0823062233','0907183900','0923040321','1008102122','1023132628','1107133450','1122110146','1207062649','1222002208'],
                       \ '2007' : ['0105174012','0120110052','0204051813','0219010855','0305231758','0321000724','0405040440','0420110706','0505212027','0521101158','0606012705','0621180625','0707114142','0723050010','0807213114','0823120756','0908002927','0923095116','1008161134','1023191531','1107192405','1122164956','1207121404','1222060748'],
                       \ '2008' : ['0105232449','0120164333','0204110025','0219064934','0305045848','0320054819','0404094553','0419165112','0505030330','0520160058','0605071148','0620235925','0706172654','0722105452','0807031614','0822180217','0907061410','0922154431','1007215641','1023010844','1107011040','1121224427','1206180223','1221120349'],
                       \ '2009' : ['0105051407','0119224019','0203164947','0218124608','0305104735','0320114341','0404153350','0419224428','0505085056','0520215116','0605125909','0621054533','0706231330','0722163543','0807090110','0822233836','0907115739','0922211836','1008034003','1023064328','1107065613','1122042233','1206235213','1221174648'],
                       \ '2010' : ['0105110849','0120042743','0203224752','0218183537','0305164620','0320173211','0404213028','0420042948','0505144401','0521033355','0605184926','0621112828','0707050228','0722222116','0807144909','0823052658','0907174442','0923030907','1008092637','1023123510','1107124234','1122101435','1207053826','1221233831'],
                       \ '2011' : ['0105165442','0120101837','0204043259','0219002520','0305222957','0320232041','0405031156','0420101722','0505202310','0521092107','0606002718','0621171630','0707104202','0723041152','0807203328','0823112039','0907233411','0923090434','1008151902','1023183017','1107183457','1122160752','1207112903','1222053005'],
                       \ '2012' : ['0105224359','0120160952','0204102227','0219061739','0305042105','0320051427','0404090538','0419161208','0505021946','0520151538','0605062600','0620230852','0706164047','0722100056','0807023037','0822170652','0907052900','0922144856','1007211139','1023001329','1107002555','1121215006','1206171856','1221111137'],
                       \ '2013' : ['0105043340','0119215146','0203161327','0218120138','0305101452','0320110156','0404150229','0419220319','0505081814','0520210935','0605122326','0621050405','0706223442','0722155604','0807082024','0822230142','0907111615','0922204407','1008025829','1023060950','1107061354','1122034809','1206230836','1221171104'],
                       \ '2014' : ['0105102414','0120035114','0203220315','0218175929','0305160216','0320165707','0404204640','0420035534','0505135927','0521025905','0605180306','0621105119','0707041453','0722214129','0807140236','0823044604','0907170130','0923022908','1008084734','1023115707','1107120646','1122093816','1207050412','1221230306'],
                       \ '2015' : ['0105162038','0120094319','0204035831','0218234950','0305215541','0320224510','0405023910','0420094155','0505195241','0521084451','0605235813','0621163757','0707101216','0723033029','0807200126','0823103716','0907225934','0923082034','1008144251','1023174645','1107175837','1122152516','1207105319','1222044758'],
                       \ '2016' : ['0105220826','0120152712','0204094609','0219053350','0305034338','0320043016','0404082736','0419152933','0505014159','0520143637','0605054837','0620223417','0706160327','0722093016','0807015305','0822163831','0907045107','0922142109','1007203323','1022234535','1106234741','1121212222','1206164106','1221104408'],
                       \ '2017' : ['0105035543','0119212337','0203153405','0218113124','0305093247','0320102841','0404141719','0419212659','0505073101','0520203054','0605113634','0621042405','0706215040','0722151522','0807074003','0822222017','0907103841','0922200150','1008022210','1023052642','1107053749','1122030440','1206223239','1221162759'],
                       \ '2018' : ['0105094846','0120030903','0203212831','0218171801','0305152812','0320161528','0404201248','0420031232','0505132519','0521021433','0605172903','0621100712','0707034150','0722210020','0807133042','0823040838','0907162946','0923015412','1008081447','1023112223','1107113140','1122090122','1207042549','1221222240'],
                       \ '2019' : ['0105153856','0120085932','0204031418','0218230356','0305210943','0320215826','0405015127','0420085517','0505190246','0521075907','0605230625','0621155416','0707092034','0723025025','0807191304','0823100201','0907221652','0923075011','1008140540','1023171946','1107172424','1122145855','1207101826','1222041924'],
                       \ '2020' : ['0105213005','0120145442','0204090324','0219045705','0305025659','0320034942','0404073816','0419144534','0505005130','0520134923','0605045829','0620214342','0706151430','0722083655','0807010613','0822154453','0907040757','0922133033','1007195512','1022225932','1106231400','1121203950','1206160936','1221100223'],
                       \ '2021' : ['0105032329','0119203954','0203145850','0218104401','0305085343','0320093731','0404133510','0419203327','0505064715','0520193710','0605105209','0621033213','0706210529','0722142627','0807065358','0822213501','0907095300','0922192109','1008013906','1023045113','1107045849','1122023348','1206215711','1221155926'],
                       \ '2022' : ['0105091409','0120023909','0203205048','0218164302','0305144347','0320153326','0404192015','0420022416','0505122558','0521012237','0605162551','0621091356','0707023805','0722200703','0807122913','0823031612','0907153222','0923010347','1008072234','1023103549','1107104535','1122082033','1207034618','1221214813'],
                       \ '2023' : ['0105150452','0120082934','0204024235','0218223418','0305203614','0320212426','0405011304','0420081340','0505181849','0521070913','0605221822','0621145751','0707083044','0723015033','0807182259','0823090122','0907212646','0923065003','1008131539','1023162056','1107163539','1122140245','1207093259','1222032725'],
                       \ '2024' : ['0105204925','0120140724','0204082712','0219041314','0305022250','0320030628','0404070223','0419135952','0505001010','0520125935','0605040954','0620205058','0706141959','0722074422','0807000914','0822145502','0907031122','0922124341','1007185957','1022221445','1106222001','1121195626','1206151658','1221092030'],
                       \ '2025' : ['0105023243','0119200004','0203141027','0218100635','0305080718','0320090131','0404124834','0419195604','0505055715','0520185443','0605095636','0621024218','0706200503','0722132930','0807055138','0822203354','0907085159','0922181922','1008004114','1023035057','1107040404','1122013534','1206210432','1221150302'],
                       \ '2026' : ['0105082305','0120014452','0203200204','0218155152','0305135857','0320144556','0404183959','0420013906','0505114842','0521003642','0605154819','0621082429','0707015659','0722191307','0807114246','0823021849','0907144117','0923000514','1008062918','1023093757','1107095202','1122072320','1207025232','1221205016'],
                       \ '2027' : ['0105140959','0120072951','0204014617','0218213329','0305193931','0320202444','0405001732','0420071742','0505172514','0521061817','0605212551','0621141052','0707073706','0723010441','0807172646','0823081420','0907202825','0923060143','1008121706','1023153254','1107153836','1122131615','1207083741','1222024211'],
                       \ '2028' : ['0105195440','0120132159','0204073117','0219032604','0305012449','0320021708','0404060305','0419130929','0504231214','0520120951','0605031602','0620200203','0706133022','0722065402','0806232111','0822140053','0907022205','0922114516','1007180830','1022211325','1106212720','1121185426','1206142442','1221081939'],
                       \ '2029' : ['0105014153','0119190051','0203132044','0218090753','0305071733','0320080155','0404115819','0419185541','0505050746','0520175553','0605091001','0621014821','0706192228','0722124211','0807051148','0822195140','0907081154','0922173831','1007235807','1023030807','1107031646','1122004925','1206201351','1221141409'],
                       \ '2030' : ['0105073032','0120005418','0203190819','0218145949','0305130311','0320135159','0404174055','0420004330','0505104616','0520234104','0605144429','0621073118','0707005527','0722182451','0807104717','0823013620','0907135247','0922232649','1008054512','1023090029','1107090838','1122064431','1207020734','1221200937'],
                       \ '2031' : ['0105132310','0120064759','0204005820','0218205052','0305185058','0320194054','0404232820','0420063113','0505163511','0521052755','0605203541','0621131707','0707064851','0723001028','0807164254','0823072314','0907195005','0923051515','1008114256','1023144925','1107150537','1122123231','1207080248','1222015528'],
                       \ '2032' : ['0105191604','0120123116','0204064857','0219023211','0305004011','0320012150','0404051734','0419121406','0504222550','0520111457','0605022755','0620190842','0706124052','0722060445','0806223244','0822131821','0907013753','0922111049','1007173018','1022204609','1106205411','1121183108','1206135316','1221075553'],
                       \ '2033' : ['0105010804','0119183244','0203124136','0218083350','0305063224','0320072245','0404110807','0419181310','0505041348','0520171102','0605081329','0621010109','0706182500','0722115252','0807041550','0822190156','0907072026','0922165141','1007231354','1023022730','1107024057','1122001600','1206194447','1221134553'],
                       \ '2034' : ['0105070427','0120002716','0203184111','0218143014','0305123227','0320131733','0404170617','0420000345','0505100909','0520225652','0605140640','0621064412','0707001739','0722173623','0807100906','0823004744','0907131359','0922223936','1008050712','1023081631','1107083341','1122060459','1207013650','1221193403'],
                       \ '2035' : ['0105125546','0120061422','0204003141','0218201618','0305182147','0320190253','0404225359','0420054906','0505155459','0521044328','0605195048','0621123305','0707060108','0722232840','0807155420','0823064410','0907190230','0923043859','1008105746','1023141617','1107142358','1122120320','1207072536','1222013057'],
                       \ '2036' : ['0105184332','0120121106','0204061957','0219021420','0305001150','0320010251','0404044617','0419115031','0504214927','0520104455','0605014700','0620183212','0706115732','0722052240','0806214856','0822123225','0907005501','0922102324','1007164906','1022195859','1106201447','1121174524','1206131604','1221071255'],
                       \ '2037' : ['0105003404','0119175345','0203121137','0218075853','0305060608','0320065012','0404104359','0419174018','0505034929','0520163531','0605074654','0621002230','0706175513','0722111239','0807034305','0822182203','0907064534','0922161306','1007223749','1023014954','1107020406','1121233826','1206190720','1221130745'],
                       \ '2038' : ['0105062643','0119234843','0203180338','0218135201','0305115523','0320124034','0404162925','0419232830','0505093112','0520222241','0605132539','0621060924','0706233232','0722165956','0807092120','0823001010','0907122618','0922220217','1008042136','1023074043','1107075054','1122053123','1207005627','1221190224'],
                       \ '2039' : ['0105121643','0120054341','0203235254','0218194542','0305174300','0320183200','0404221548','0420051750','0505151811','0521041054','0605191528','0621115722','0707052607','0722224808','0807151804','0823055837','0907182402','0923034939','1008101721','1023132506','1107134255','1122111210','1207064506','1222004035'],
                       \ '2040' : ['0105180339','0120112105','0204053955','0219012349','0304233113','0320001141','0404040532','0419105935','0504210924','0520095546','0605010805','0620174627','0706111918','0722044056','0806211007','0822115324','0907001409','0922094458','1007160535','1022191949','1106192923','1121170534','1206123005','1221063251'],
                       \ '2041' : ['0104234806','0119171317','0203112511','0218071720','0305051755','0320060651','0404095237','0419165459','0505025434','0520154855','0605064949','0620233554','0706165834','0722102646','0807024848','0822173621','0907055338','0922152635','1007214659','1023010158','1107011308','1121224920','1206181551','1221121822'],
                       \ '2042' : ['0105053512','0119230006','0203171254','0218130432','0305110550','0320115321','0404154041','0419223948','0505084253','0520213117','0605123817','0621051555','0706224722','0722160626','0807083853','0822231813','0907114535','0922211141','1008034043','1023064938','1107070741','1122043726','1207000918','1221180412'],
                       \ '2043' : ['0105112529','0120044144','0203225853','0218184145','0305164750','0320172748','0404212017','0420041427','0505142204','0521030910','0605181811','0621105827','0707042756','0722215333','0807142050','0823050950','0907173014','0923030701','1008092750','1023124657','1107125557','1122103509','1207055726','1222000117'],
                       \ '2044' : ['0105171234','0120103731','0204044422','0219003553','0304223138','0319232036','0404030307','0419100649','0504200535','0520090201','0605000406','0620165114','0706101604','0722034332','0806200846','0822105447','0906231635','0922084753','1007151320','1022182621','1106184203','1121161524','1206114516','1221054341'],
                       \ '2045' : ['0104230235','0119162218','0203103622','0218062225','0305042505','0320050740','0404085721','0419155258','0505015938','0520144609','0605055709','0620223403','0706160813','0722092654','0807015947','0822163916','0907050533','0922143302','1007210043','1023001235','1107002954','1121220357','1206173542','1221113515'],
                       \ '2046' : ['0105045606','0119221558','0203163109','0218121544','0305101752','0320105800','0404144503','0419213903','0505074048','0520202838','0605113225','0621041450','0706214029','0722150853','0807073330','0822222441','0907104324','0922202153','1008024234','1023060346','1107061422','1122035628','1206232128','1221172839'],
                       \ '2047' : ['0105104232','0120041006','0203221809','0218181031','0305160526','0320165249','0404203252','0420033244','0505132843','0521022005','0605172101','0621100339','0707033041','0722205542','0807132606','0823041103','0907163820','0923020815','1008083750','1023114842','1107120728','1122093824','1207051112','1221230725'],
                       \ '2048' : ['0105162936','0120094720','0204040451','0218234843','0304215420','0319223404','0404022531','0419091743','0504192446','0520080818','0604231834','0620155411','0706092703','0722024713','0806191904','0822100244','0906222817','0922080050','1007142654','1022174253','1106175658','1121153336','1206110054','1221050222'],
                       \ '2049' : ['0104221851','0119154124','0203095336','0218054232','0305034308','0320042846','0404081430','0419151334','0505011245','0520140355','0605050350','0620214726','0706150857','0722083629','0807005807','0822154732','0907040544','0922134246','1007200512','1022232522','1106233835','1121211929','1206164649','1221105220'],
                       \ '2050' : ['0105040804','0119213400','0203154400','0218113518','0305093254','0320101946','0404140321','0419210217','0505070200','0520195050','0605105449','0621033301','0706210155','0722142129','0807065237','0822213252','0907100053','0922192846','1008020023','1023051159','1107053347','1122030625','1206224154','1221163850'],
                       \}
" define command
command! -n=0 -bar LYNew :call s:InsertDateTime()
command! -n=0 -bar LYParse :call s:ParseDateTime()
command! -n=0 -bar LYSet :call s:SetPaiPanMode()
"" key-binding
"nmap <Leader>yi :LiuYaoInsertDateTime<CR>
"nmap <Leader>yp :LiuYaoParseDateTime<CR>

function! s:SetPaiPanMode()
    let l:mode = s:ListAndSelect('PaiPan Mode List:', s:paipanmethod, g:ly_paipan_mode)
    if l:mode >= 0
        let g:ly_paipan_mode = l:mode
    endif
endfunction
function! s:InsertDateTime()
    let l:curdt = strftime("%Y-%m-%d %H:%M:%S")
    let l:method = s:ListAndSelect('Method List:', s:setupmethod, -1)
    if l:method >= 0
        let l:coins = s:setupexample[l:method]
        if len(getline('.')) > 0
            call append(line('.'), l:curdt . ' ' . l:coins)
        else
            call setline(line('.'), l:curdt . ' ' . l:coins)
        endif
    endif
endfunction
function! s:ParseDateTime()
    let l:curlineno = line('.')
    let l:parts  = split(getline(l:curlineno), '[ \t]\+')
    let l:datetime  = map(split(l:parts[0] . ' ' . l:parts[1], '[ \t:-]\+'), 'str2nr(v:val)')
    let l:datenew = s:calcChineseSolarDT(l:datetime)
    let l:datestr = s:calcDateStr(l:datenew)
    let l:guas = s:calcGua(l:parts[2])
    if (l:guas[0] < 0) || (l:guas[1] < 0)
        return
    endif
    let l:guastr = s:calcGuaStr(l:guas, l:datenew[2])
    call append(l:curlineno, l:datestr)
    for l:i in range(len(s:txtLS) + 1)
        let l:curlineno = l:curlineno + 1
        call append(l:curlineno, l:guastr[i])
    endfor
endfunction
function! s:myModulo(a, b)
    " @retval 0 ~ (b-1)
    return (a:a % a:b + a:b) % a:b
endfunction
function! s:calcDateStr(datetime)
    let l:year  = a:datetime[0]
    let l:month = a:datetime[1]
    let l:day   = a:datetime[2]
    let l:hour  = a:datetime[3]
    let l:empty = ((l:day + 9) / 10) * 10 + 1
    let l:rettxt = ''
    let l:rettxt = l:rettxt . s:txtTG[s:myModulo(l:year  - 1, 10)] . s:txtDZ[s:myModulo(l:year  - 1, 12)] . s:txtExtra[0] . ' ' " 年
    let l:rettxt = l:rettxt . s:txtTG[s:myModulo(l:month - 1, 10)] . s:txtDZ[s:myModulo(l:month - 1, 12)] . s:txtExtra[1] . ' ' " 月
    let l:rettxt = l:rettxt . s:txtTG[s:myModulo(l:day   - 1, 10)] . s:txtDZ[s:myModulo(l:day   - 1, 12)] . s:txtExtra[2] . ' ' " 日
    let l:rettxt = l:rettxt . s:txtTG[s:myModulo(l:hour  - 1, 10)] . s:txtDZ[s:myModulo(l:hour  - 1, 12)] . s:txtExtra[3] . '  ' . s:txtExtra[4] " 时  空
    let l:rettxt = l:rettxt . s:txtDZ[s:myModulo(l:empty - 1, 12)] . s:txtDZ[s:myModulo(l:empty,     12)]
    if (len(a:datetime) > 4) && (a:datetime[4] <= 0)
        let l:rettxt = l:rettxt . '  N/F'
    endif
    return l:rettxt
endfunction
function! s:calcChineseSolarDT(datetime)
    let l:terminfo = s:calcTermIndex(a:datetime)
    let l:termidx = l:terminfo[0]
    if l:termidx < 0
        let l:year = s:myModulo(a:datetime[0] - 1 - 1984, 60) + 1
        let l:month = (l:termidx - 1) / 2 + 2
    else
        let l:year = s:myModulo(a:datetime[0] - 1984, 60) + 1
        let l:month = l:termidx / 2 + 2
    endif
    let l:month = s:myModulo(l:month + s:myModulo(l:year - 1, 5) * 12, 60) + 1
    let l:day = (a:datetime[0] - 1984) * 5 + (a:datetime[0] - 1984 + 3) / 4 + 29 + s:calcDays(a:datetime[0], a:datetime[1], a:datetime[2])
    if a:datetime[3] >= 23
        let l:day = l:day + 1
        let l:hour = 1
    else
        let l:hour = (a:datetime[3] + 1) / 2 + 1
    endif
    let l:day = s:myModulo(l:day, 60) + 1
    let l:hour = s:myModulo(l:hour + s:myModulo(l:day - 1, 5) * 12 - 1, 60) + 1
    return [l:year, l:month, l:day, l:hour, l:terminfo[1]]
endfunction
function! s:calcTermIndex(datetime)
    " @retval -3~-1:winter 0~5:spring  6~11:summer  12~17:autumn 18~21:winter
    let l:yearstr = printf("%04d", a:datetime[0])
    let l:indb = 1
    if has_key(s:ChineseSolarDB, l:yearstr)
        let l:timestr = printf("%02d%02d%02d%02d%02d", a:datetime[1], a:datetime[2], a:datetime[3], a:datetime[4], a:datetime[5])
        let l:i = len(s:ChineseSolarDB[l:yearstr]) - 1
        while l:i >= 0
            if s:ChineseSolarDB[l:yearstr][l:i] <= l:timestr
                break
            endif
            let l:i = l:i - 1
        endwhile
        let l:idx = l:i - 2
    else
        let l:idx = a:datetime[1] * 2 - 4
        if a:datetime[2] <= 6
            let l:idx = l:idx - 1
        elseif a:datetime[2] >=21
            let l:idx = l:idx + 1
        endif
        let l:indb = 0
    endif
    return [l:idx, l:indb]
endfunction
function! s:calcDays(year, month, day)
    " @retval 1 ~ 366
    let l:daystable = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30]
    let l:i = 1
    let l:days = a:day
    while l:i < a:month
        let l:days = l:days + l:daystable[l:i - 1]
        let l:i = l:i + 1
    endwhile
    " leap year
    if a:month > 2
        if (a:year % 400 == 0) || ((a:year % 100 != 0) && (a:year % 4 == 0))
            let l:days = l:days + 1
        endif
    endif
    return l:days
endfunction
function! s:calcGuaStr(guas, day)
    let l:yaolen  = len(s:txtLS)
    let l:wxlen   = len(s:txtLQ)
    let l:typelen = len(s:txtGuaType)
    let l:yaostr  = repeat(['',], l:yaolen + 1)
    let l:day     = s:myModulo(a:day - 1, 10)
    let l:guacol  = repeat([0,], l:typelen)
    let l:guainfo = []
    let l:base    = s:calcBase(a:guas[0])
    let l:basewx  = s:wxGua[l:base[0] % 8]
    " 宫卦
    call add(l:guainfo, [l:base[0], l:base[0] % 8, 6])
    " 正卦
    call add(l:guainfo, [a:guas[0], l:base[0] % 8, l:base[1]])
    " 互卦
    let l:guahu   = and(a:guas[0], 14) / 2 + and(a:guas[0], 28) * 2
    let l:base    = s:calcBase(l:guahu)
    call add(l:guainfo, [l:guahu, l:base[0] % 8, l:base[1]])
    " 变卦
    let l:base    = s:calcBase(a:guas[1])
    call add(l:guainfo, [a:guas[1], l:base[0] % 8, l:base[1]])
    " 错卦
    let l:guacuo  = xor(a:guas[0], 63)
    let l:base    = s:calcBase(l:guacuo)
    call add(l:guainfo, [l:guacuo, l:base[0] % 8, l:base[1]])
    " 综卦
    let l:guazong = and(a:guas[0], 1) * 32 + and(a:guas[0], 2) * 8 + and(a:guas[0], 4) * 2 + and(a:guas[0], 8) / 2 + and(a:guas[0], 16) / 8 + and(a:guas[0], 32) / 32
    let l:base    = s:calcBase(l:guazong)
    call add(l:guainfo, [l:guazong, l:base[0] % 8, l:base[1]])
    " 初爻六神
    if l:day < 2
        let l:day = 0
    elseif l:day < 4
        let l:day = 1
    elseif l:day < 5
        let l:day = 2
    elseif l:day < 6
        let l:day = 3
    elseif l:day < 8
        let l:day = 4
    else
        let l:day = 5
    endif
    " 记录六亲出现情况（宫卦，正卦变卦）
    let l:lq0 = []
    for l:j in range(l:wxlen)
        call add(l:lq0, [])
    endfor
    let l:lq1 = repeat([0,], l:wxlen)
    " 装卦
    for l:j in range(2)
        if l:j == 0
            " 上卦
            let l:gua00 = l:guainfo[0][0] % 8
            let l:gua01 = l:guainfo[1][0] % 8
            let l:gua02 = l:guainfo[2][0] % 8
            let l:gua03 = l:guainfo[3][0] % 8
            let l:gua04 = l:guainfo[4][0] % 8
            let l:gua05 = l:guainfo[5][0] % 8
            let l:imin = 0
            let l:imax = l:yaolen / 2 - 1
        else
            " 下卦
            let l:gua00 = l:guainfo[0][0] / 8
            let l:gua01 = l:guainfo[1][0] / 8
            let l:gua02 = l:guainfo[2][0] / 8
            let l:gua03 = l:guainfo[3][0] / 8
            let l:gua04 = l:guainfo[4][0] / 8
            let l:gua05 = l:guainfo[5][0] / 8
            let l:imin = l:yaolen / 2
            let l:imax = l:yaolen - 1
        endif
        let l:gua0 = l:gua00
        let l:gua1 = l:gua01
        let l:gua2 = l:gua02
        let l:gua3 = l:gua03
        let l:gua4 = l:gua04
        let l:gua5 = l:gua05
        for l:i in range(l:imin, l:imax)
            " 六神
            let l:yaostr[i] = l:yaostr[i] . s:txtLS[s:myModulo(l:day + l:yaolen - l:i - 1, l:yaolen)]
            " 宫卦
            let l:yaog  = s:myModulo(s:baseGZ[l:gua00][l:i] - 1, 10)
            let l:yaoz  = s:myModulo(s:baseGZ[l:gua00][l:i] - 1, 12)
            let l:yaolq = s:myModulo(l:basewx - s:wxDZ[l:yaoz], l:wxlen)
            call add(l:lq0[l:yaolq], l:i)
            let l:gongpos1 = strlen(l:yaostr[i])
            let l:yaostr[i] = l:yaostr[i] . '  '
            let l:guacol[0] = strlen(l:yaostr[i])
            let l:yaostr[i] = l:yaostr[i] . s:txtYao[l:gua0 % 2] . s:txtDZ[l:yaoz] . s:txtLQ[l:yaolq]
            let l:gongpos2 = strlen(l:yaostr[i])
            " 正卦
            let l:yaog  = s:myModulo(s:baseGZ[l:gua01][l:i] - 1, 10)
            let l:yaoz  = s:myModulo(s:baseGZ[l:gua01][l:i] - 1, 12)
            let l:yaolq = s:myModulo(l:basewx - s:wxDZ[l:yaoz], l:wxlen)
            let l:lq1[l:yaolq] = 1
            if l:yaolen - l:i == l:guainfo[1][2]
                let l:txtsy = s:txtGua[l:guainfo[1][1]] " 世
            elseif (l:yaolen - l:i == l:guainfo[1][2] + 3) || (l:yaolen - l:i == l:guainfo[1][2] - 3)
                let l:txtsy = s:txtExtra[6] " 应
            else
                let l:txtsy = '  '
            endif
            let l:yaostr[i] = l:yaostr[i] . '  '
            let l:guacol[1] = strlen(l:yaostr[i])
            let l:yaostr[i] = l:yaostr[i] . s:txtYao[l:gua1 % 2] . l:txtsy . s:txtDZ[l:yaoz] . s:txtLQ[l:yaolq]
            " 互卦
            if g:ly_paipan_mode == 1
                let l:txtsy = ''
                let l:yaog  = s:myModulo(s:baseGZ[l:gua02][l:i] - 1, 10)
                let l:yaoz  = s:myModulo(s:baseGZ[l:gua02][l:i] - 1, 12)
                let l:yaolq = s:myModulo(l:basewx - s:wxDZ[l:yaoz], l:wxlen)
                let l:yaostr[i] = l:yaostr[i] . '  '
                let l:guacol[2] = strlen(l:yaostr[i])
                let l:yaostr[i] = l:yaostr[i] . s:txtYao[l:gua2 % 2] . l:txtsy . s:txtDZ[l:yaoz] . s:txtLQ[l:yaolq]
            endif
            " 变卦
            if (g:ly_paipan_mode == 1) || ((g:ly_paipan_mode == 0) && ((g:ly_visible_all == 1) || (l:gua3 % 2 != l:gua1 % 2)))
                " 变爻
                if l:yaolen - l:i == l:guainfo[3][2]
                    let l:txtsy = s:txtGua[l:guainfo[3][1]] " 世
                elseif (l:yaolen - l:i == l:guainfo[3][2] + 3) || (l:yaolen - l:i == l:guainfo[3][2] - 3)
                    let l:txtsy = s:txtExtra[6] " 应
                else
                    let l:txtsy = '  '
                endif
                if l:gua3 % 2 != l:gua1 % 2
                    let l:txtdj = s:txtExtra[7]
                else
                    let l:txtdj = '  '
                endif
                let l:yaog  = s:myModulo(s:baseGZ[l:gua03][l:i] - 1, 10)
                let l:yaoz  = s:myModulo(s:baseGZ[l:gua03][l:i] - 1, 12)
                let l:yaolq = s:myModulo(l:basewx - s:wxDZ[l:yaoz], l:wxlen)
                let l:lq1[l:yaolq] = 1
                let l:yaostr[i] = l:yaostr[i] . '  ' . l:txtdj
                let l:guacol[3] = strlen(l:yaostr[i])
                let l:yaostr[i] = l:yaostr[i] . s:txtYao[l:gua3 % 2] . l:txtsy . s:txtDZ[l:yaoz] . s:txtLQ[l:yaolq]
            endif
            " 错卦
            if g:ly_paipan_mode == 1
                let l:txtsy = ''
                let l:yaog  = s:myModulo(s:baseGZ[l:gua04][l:i] - 1, 10)
                let l:yaoz  = s:myModulo(s:baseGZ[l:gua04][l:i] - 1, 12)
                let l:yaolq = s:myModulo(l:basewx - s:wxDZ[l:yaoz], l:wxlen)
                let l:yaostr[i] = l:yaostr[i] . '  '
                let l:guacol[4] = strlen(l:yaostr[i])
                let l:yaostr[i] = l:yaostr[i] . s:txtYao[l:gua4 % 2] . l:txtsy . s:txtDZ[l:yaoz] . s:txtLQ[l:yaolq]
            endif
            " 综卦
            if g:ly_paipan_mode == 1
                let l:txtsy = ''
                let l:yaog  = s:myModulo(s:baseGZ[l:gua05][l:i] - 1, 10)
                let l:yaoz  = s:myModulo(s:baseGZ[l:gua05][l:i] - 1, 12)
                let l:yaolq = s:myModulo(l:basewx - s:wxDZ[l:yaoz], l:wxlen)
                let l:yaostr[i] = l:yaostr[i] . '  '
                let l:guacol[5] = strlen(l:yaostr[i])
                let l:yaostr[i] = l:yaostr[i] . s:txtYao[l:gua5 % 2] . l:txtsy . s:txtDZ[l:yaoz] . s:txtLQ[l:yaolq]
            endif
            let l:gua0 = l:gua0 / 2
            let l:gua1 = l:gua1 / 2
            let l:gua2 = l:gua2 / 2
            let l:gua3 = l:gua3 / 2
            let l:gua4 = l:gua4 / 2
            let l:gua5 = l:gua5 / 2
        endfor
    endfor
    " 添加卦类型
    let l:yaostr[l:yaolen] = repeat(' ', max(l:guacol))
    for l:i in range(l:typelen)
        if l:guacol[l:i] > 0
            let l:tmptxt = s:txtGuaType[l:i]
            let l:yaostr[l:yaolen] = strpart(l:yaostr[l:yaolen], 0, l:guacol[l:i]) . l:tmptxt . strpart(l:yaostr[l:yaolen], l:guacol[l:i] + len(l:tmptxt))
        endif
    endfor
    " 添加伏神标记
    if index(l:lq1, 0) >= 0
        for l:j in range(l:wxlen)
            if l:lq1[l:j] > 0
                for l:i in l:lq0[l:j]
                    let l:yaostr[l:i] = strpart(l:yaostr[l:i], 0, l:gongpos2) . '  ' . strpart(l:yaostr[l:i], l:gongpos2)
                endfor
            else
                for l:i in l:lq0[l:j]
                    let l:yaostr[l:i] = strpart(l:yaostr[l:i], 0, l:gongpos2) . s:txtExtra[8] . strpart(l:yaostr[l:i], l:gongpos2)
                endfor
            endif
        endfor
        let l:yaostr[l:yaolen] = strpart(l:yaostr[l:yaolen], 0, l:gongpos2) . '  ' . strpart(l:yaostr[l:yaolen], l:gongpos2)
        let l:gongpos2 = l:gongpos2 + 2
        let l:guacol[1] = l:guacol[1] + 2
        let l:guacol[2] = l:guacol[2] + 2
        let l:guacol[3] = l:guacol[3] + 2
        let l:guacol[4] = l:guacol[4] + 2
    endif
    " 删除无用宫卦
    if (g:ly_paipan_mode == 0) && (g:ly_visible_all != 1)
        if index(l:lq1, 0) < 0
            " 无伏神
            for l:i in range(l:yaolen + 1)
                let l:yaostr[l:i] = strpart(l:yaostr[l:i], 0, l:gongpos1) . strpart(l:yaostr[l:i], l:gongpos2)
            endfor
        else
            for l:j in range(l:wxlen)
                if l:lq1[l:j] > 0
                    for l:i in l:lq0[l:j]
                        let l:yaostr[l:i] = strpart(l:yaostr[l:i], 0, l:gongpos1) . repeat(' ', l:gongpos2 - l:gongpos1) . strpart(l:yaostr[l:i], l:gongpos2)
                    endfor
                endif
            endfor
        endif
    endif
    return l:yaostr
endfunction
function! s:calcGua(coinstr)
    " @retval [gua1 gua2]
    let l:method = strpart(a:coinstr, 0, 2)
    let l:gua1 = -1
    let l:gua2 = -1
    if l:method == 'CH'
        let l:gua1 = 0
        let l:gua2 = 0
        for l:i in range(len(s:txtLS))
            let l:highest = 3 - s:myModulo(str2nr(a:coinstr[l:i + 3]), 4)
            let l:gua1    = l:gua1 * 2 + s:myModulo(l:highest, 2)
            if l:highest / 2 == s:myModulo(l:highest, 2)
                let l:gua2    = l:gua2 * 2 + 1 - s:myModulo(l:highest, 2)
            else
                let l:gua2    = l:gua2 * 2 + s:myModulo(l:highest, 2)
            endif
        endfor
    elseif l:method == 'CT'
        let l:gua1 = 0
        let l:gua2 = 0
        for l:i in range(len(s:txtLS))
            let l:highest = s:myModulo(str2nr(a:coinstr[l:i + 3]), 4)
            let l:gua1    = l:gua1 * 2 + s:myModulo(l:highest, 2)
            if l:highest / 2 == s:myModulo(l:highest, 2)
                let l:gua2    = l:gua2 * 2 + 1 - s:myModulo(l:highest, 2)
            else
                let l:gua2    = l:gua2 * 2 + s:myModulo(l:highest, 2)
            endif
        endfor
    elseif l:method == 'GC'
        let l:gua1 = len(s:txtGua) - s:myModulo(str2nr(a:coinstr[3]) - 1, 8) - 1
        let l:gua2 = len(s:txtGua) - s:myModulo(str2nr(a:coinstr[4]) - 1, 8) - 1
        let l:gua1 = l:gua2 * 8 + l:gua1
        let l:gua2 = l:gua1
        let l:bits = [32, 16, 8, 4, 2, 1]
        for l:i in range(5, len(a:coinstr) - 1)
            let l:pos = s:myModulo(str2nr(a:coinstr[l:i]) - 1, 6)
            let l:gua2 = xor(l:gua2, l:bits[l:pos])
        endfor
    elseif l:method == 'TN'
        let l:parts  = map(split(strpart(a:coinstr, 3), ','), 'str2nr(v:val)')
        let l:gua1 = len(s:txtGua) - s:myModulo(l:parts[0] - 1, 8) - 1
        let l:gua2 = len(s:txtGua) - s:myModulo(l:parts[1] - 1, 8) - 1
        let l:gua1 = l:gua2 * 8 + l:gua1
        let l:gua2 = l:gua1
        let l:bits = [32, 16, 8, 4, 2, 1]
        let l:pos = s:myModulo(l:parts[2] - 1, 6)
        let l:gua2 = xor(l:gua2, l:bits[l:pos])
    endif
    return [l:gua1, l:gua2]
endfunction
function! s:calcBase(gua)
    " @retval [gua0 shiyao]
    let l:base = s:myModulo(a:gua, 64)
    let l:bit  = [0, 32, 16, 8, 4, 2, 4, 56]
    let l:pos  = [6,  1,  2, 3, 4, 5, 4,  3]
    let l:i    = 0
    while l:i < len(l:bit)
        let l:base = xor(l:base, l:bit[l:i])
        if s:myModulo(l:base, 9) == 0
            break
        endif
        let l:i = l:i + 1
    endwhile
    return [l:base, l:pos[l:i]]
endfunction
function! s:ListAndSelect(title, itemlist, markindex)
    let l:choices = copy(a:itemlist)
    " generate choice-list
    call map(l:choices, '"  " . (v:key + 1) . ". " . v:val')
    " insert '*' at the start of selected item
    if (a:markindex >= 0) && (a:markindex < len(a:itemlist))
        let l:choices[a:markindex] = '*' . l:choices[a:markindex][1:]
    endif
    " set list title
    call insert(l:choices, a:title)
    " ask for user choice
    let l:choice = inputlist(l:choices)
    if (l:choice < 1) || (l:choice > len(a:itemlist))
        let l:choice = 0
    endif
    return l:choice - 1
endfunction
